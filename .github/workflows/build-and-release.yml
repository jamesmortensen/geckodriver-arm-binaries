name: Docker Image CI

on:
  push:
    branches: [ master, cross-compilation ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        arch: [armv7l, aarch64]
    env:
      GECKODRIVER_VERSION: "0.31.0"
      ARCH: ${{ matrix.arch }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set environment variables
      run: |
        if [ "$ARCH" == "armv7l" ]; then
            echo "PLATFORM=linux/arm/v7" >> $GITHUB_ENV
            echo "ARCH_TUPLE=armv7-unknown-linux-gnueabihf" >> $GITHUB_ENV
        elif [ "$ARCH" == "aarch64" ]; then
            echo "PLATFORM=linux/arm64" >> $GITHUB_ENV
            echo "ARCH_TUPLE=aarch64-unknown-linux-gnu" >> $GITHUB_ENV
        fi
    - name: Build the Docker image build environment
      run: |
        docker build --build-arg GECKODRIVER_VERSION=$GECKODRIVER_VERSION -t local/geckodriver-cross-builder .
        #docker buildx build --load --platform $PLATFORM --build-arg GECKODRIVER_VERSION=$GECKODRIVER_VERSION -t local/geckodriver-arm-builder .
    - name: Build the geckodriver binaries in the artifacts directory
      run: |    
        docker run -it -v $PWD/artifacts:/media/host -w /opt/geckodriver --name geckodriver-cross-builder local/geckodriver-cross-builder bash -c "sh build-geckodriver-arm.sh release `echo $ARCH_TUPLE`"
    - name: Package up the binaries in a tar.gz and calculate md5 hashes
      run: |
        sudo chown -R runner:runner artifacts
        mv artifacts/geckodriver geckodriver
        tar cvfz geckodriver-v$GECKODRIVER_VERSION-linux-$ARCH.tar.gz geckodriver
        md5sum geckodriver-v$GECKODRIVER_VERSION-linux-$ARCH.tar.gz > geckodriver-v$GECKODRIVER_VERSION-linux-$ARCH.tar.gz.md5
    - name: Generate release notes
      run: |
        echo "NOTE:  This is an unofficial arm64 build and armhf of geckodriver v$GECKODRIVER_VERSION.  These binaries are compiled and built independently and are not provided by Mozilla." > release_notes.md  
        echo "" >> release_notes.md
        echo "For details of what is contained in this release, see the [official geckodriver release notes](https://github.com/mozilla/geckodriver/releases)." >> release_notes.md
    - name: Upload artifacts with binaries and md5 hashes
      if: ${{ github.ref != 'refs/heads/master' }}
      uses: actions/upload-artifact@v3
        with:
          name: geckodriver-v$GECKODRIVER_VERSION-linux-$ARCH.tar.gz
          path: |
            geckodriver-v$GECKODRIVER_VERSION-linux-$ARCH.tar.gz
      uses: actions/upload-artifact@v3
        with:
          name: geckodriver-v$GECKODRIVER_VERSION-linux-$ARCH.tar.gz.md5
          path: |
            geckodriver-v$GECKODRIVER_VERSION-linux-$ARCH.tar.gz.md5
      uses: actions/upload-artifact@v3
        with:
          name: release_notes.md
          path: |
            release_notes.md
    - name: Publish releases with binaries and md5 hashes
      if: ${{ github.ref == 'refs/heads/master' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        export RELEASE_TAG=$GECKODRIVER_VERSION
        go install github.com/github-release/github-release@v0.10.0
        VERSION=`~/go/bin/github-release info -u jamesmortensen -r geckodriver-arm-binaries | grep $GECKODRIVER_VERSION | head -n 1 | awk '{print $2}'`
        echo "VERSION set to $VERSION"
        # Let faster job set the release notes
        if [ "$VERSION" != "v$GECKODRIVER_VERSION" ]; then
            echo "Set release notes"
            #~/go/bin/github-release release -u jamesmortensen -r geckodriver-arm-binaries --tag v$RELEASE_TAG --name $RELEASE_TAG --description "`cat release_notes.md`"
            sleep 4
        fi
        echo "Upload files..."
        #~/go/bin/github-release upload -u jamesmortensen -r geckodriver-arm-binaries --tag v$RELEASE_TAG --name geckodriver-v$GECKODRIVER_VERSION-linux-$ARCH.tar.gz --file geckodriver-v$GECKODRIVER_VERSION-linux-$ARCH.tar.gz
        #~/go/bin/github-release upload -u jamesmortensen -r geckodriver-arm-binaries --tag v$RELEASE_TAG --name geckodriver-v$GECKODRIVER_VERSION-linux-$ARCH.tar.gz.md5 --file geckodriver-v$GECKODRIVER_VERSION-linux-$ARCH.tar.gz.md5
        
